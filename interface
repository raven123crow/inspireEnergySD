#include <Picadillo.h>
#include <Arial.h>
#include <Widgets.h>

#define PORTRAIT  0  	// 0 degrees
#define ORIGIN    0     // zero coordinate
#define MAX_LIGHT 255   // turn on maximum light for screen
#define UPPER_DISPLAY_SCREEN_OFFSET 200
#define RECT_BUTTON_OFFSET 40
#define BT_START_BOARDER 41
#define BT_END_BOARDER 65
#define BATT_BOARDER 5
// global variables
Picadillo tft;
AnalogTouch ts(LCD_XL, LCD_XR, LCD_YU, LCD_YD, 320, 480);  
twButton    up(ts, tft, ORIGIN, ORIGIN, 320, 40, "");
twButton    down(ts, tft, ORIGIN, 440, 320, 480, "");

//global variables
bool isPressed = false;
bool previousPressed = false; // stores previous loops pressed value
bool isPreviousPageCleared = 0;
int pressure = 0;
int currentPage = 0; // currently displayed page counter
String s = " ";



/*********************Function Definitions*************************/
/*****************intializationSetup******************************/
void intializationSetup(){
	analogWrite(PIN_BACKLIGHT, MAX_LIGHT); // 0 is off and 255 is on
 
	tft.initializeDevice();
	tft.setRotation(PORTRAIT);   // sets orientation of the display
	
	ts.initializeDevice();
	ts.setRotation(PORTRAIT);   // sets the orientation of the touch screen
	//ts.scaleX(4.3);              // set the touch screen area x // 4.3
	//ts.scaleY(3.3);             // set the touch screen area y  // 3.3

	tft.fillScreen(Color::White);
	tft.setTextColor(Color::Black, Color::White);
	tft.setFont(Fonts::Arial30);  // 20
	int centerX = tft.getWidth()/2 - 90;   // set center coordinate for x axis    
	int centerY = tft.getHeight()/2.5;       // set center coordinate for y axis
	tft.setCursor(centerX,centerY);        // set location of cursor to center
	tft.print("Inspired\n");
	tft.setCursor(centerX, centerY+ 40); // move cursor to the next available line
	tft.print("Energy\n");
	
    delay(1000);
	tft.fillScreen(Color::White);
	tft.setCursor(ORIGIN,ORIGIN);
	
	ts.sample();
}

/*****************setButton******************************************/
void displayButtons(){
	drawUpArrow();
	drawDownArrow();
}

/*****************drawUpArrow***************************************/
void drawUpArrow(){
	up.setBevel(4);
	up.render();
	int centerX = tft.getWidth()/2;
	int x0 = centerX;
	int x1 = centerX - 10;     // shift x coordinates left by 10 pixels from center
	int x2 = centerX + 10;     // shift x coordinates right by 10 pixels from center 
    int y0 = ORIGIN + 5;       // move y coordinate 5 pixels down from orgin
    int y1 = ORIGIN + 35;      // move y coordinate 35 pixels down from orgin
	int y2 = y1;
	uint16_t color = rand();
	tft.fillTriangle(x0,y0,x1,y1,x2,y2,color);
	color = rand() % 237;
	tft.drawTriangle(x0,y0,x1,y1,x2,y2,color);
}

/*****************drawDownArrow**************************************/
void drawDownArrow(){
	down.setBevel(4);
	down.render();
	int centerX = tft.getWidth()/2;
	int centerY = tft.getHeight()/2;
	int x0 = centerX;
	int x1 = centerX + 10;     // shift x coordinates left by 10 pixels from center
	int x2 = centerX - 10;     // shift x coordinates right by 10 pixels from center 
    int y0 = centerY + 235;       // move y coordinate 5 pixels down from orgin
    int y1 = centerY + 205;      // move y coordinate 35 pixels down from orgin
	int y2 = y1;
	uint16_t color = rand(); //237 colors
	tft.fillTriangle(x0,y0,x1,y1,x2,y2,color);
	color = rand() % 237;
	tft.drawTriangle(x0,y0,x1,y1,x2,y2,color);
}

/*****************bluetoothStatusInfo***********************************/
void bluetoothStatusInfo(){
	drawBtBoarder();	
}

/******************drawBtBoarder**************************************/
void drawBtBoarder(){
	int width = tft.getWidth();
	tft.drawHorizontalLine(ORIGIN, BT_START_BOARDER, width, Color::NavyBlue);
	tft.drawHorizontalLine(ORIGIN, BT_END_BOARDER + RECT_BUTTON_OFFSET, width, Color::NavyBlue);
}

/******************bluetoothData**************************************/
void bluetoothData(){
	
}

/******************batteryinfo****************************************/
void batteryInfo(){
	
}

/******************drawBatteryBoarder**************************************/
void drawBatteryBoarder(){
	int width = tft.getWidth();
	tft.drawHorizontalLine(ORIGIN, BT_START_BOARDER, width, Color::Peru);
}

void displayData (int pg) {
	tft.setFont(Fonts::Arial12);
	tft.setTextColor(Color::Black, Color::White);
		if (pg == 0) {
			tft.setCursor(ORIGIN,BATT_BOARDER + BT_END_BOARDER + RECT_BUTTON_OFFSET);

			tft.print("Remaining Capacity Alarm:\n");
			tft.print(" 2600 mAh\n\n");
			tft.print("Remaining Time Alarm:\n");
			tft.print(" 120 min\n\n");
			tft.print("At Rate Time to Empty:\n");
			tft.print(" 59 min\n\n");
			tft.print("Temperature:\n");
			tft.print(" 0.1 K\n\n");
			tft.print("Voltage:\n");
			tft.print(" 10800 mV\n\n");
			tft.print("Current:\n");
			tft.print(" 2200 mA\n\n");

		    /*
			tft.print("and the list Continues:\n\n");
			tft.print("We just wanted to see just how much text we could \n");
			tft.print("actually fit on the screen.\n");
			*/
		} else {
			tft.setCursor(ORIGIN,BATT_BOARDER + BT_END_BOARDER + RECT_BUTTON_OFFSET);
			tft.print("Relative State of Charge:\n");
			tft.print(" 80 %\n\n"); 
			tft.print("Absolute State of Charge:\n");
			tft.print(" 81.2 %\n\n"); 
			tft.print("Average Time to Empty:\n");
			tft.print(" 73 min\n\n");
		}

	}
